{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/user-service.service\";\nimport * as i2 from \"@angular/router\";\nexport class UserGuard {\n  constructor(userService, router) {\n    this.userService = userService;\n    this.router = router;\n  }\n  canActivate() {\n    const user = this.userService.getUserIdFromToken();\n    if (user) {\n      return true;\n    } else {\n      this.router.navigateByUrl(\"\");\n    }\n  }\n  static #_ = this.ɵfac = function UserGuard_Factory(t) {\n    return new (t || UserGuard)(i0.ɵɵinject(i1.UserServiceService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserGuard,\n    factory: UserGuard.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,WAA8B,EAASC,MAAa;IAApD,gBAAW,GAAXD,WAAW;IAA4B,WAAM,GAANC,MAAM;EAAS;EAC1EC,WAAW;IAET,MAAMC,IAAI,GAAC,IAAI,CAACH,WAAW,CAACI,kBAAkB,EAAE;IAChD,IAAGD,IAAI,EAAC;MACN,OAAO,IAAI;KACZ,MACG;MACF,IAAI,CAACF,MAAM,CAACI,aAAa,CAAC,EAAE,CAAC;;EAEjC;EAAC;qBAXUP,SAAS;EAAA;EAAA;WAATA,SAAS;IAAAQ,SAATR,SAAS;IAAAS,YAFR;EAAM","names":["UserGuard","constructor","userService","router","canActivate","user","getUserIdFromToken","navigateByUrl","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ayushpal\\Expense_Settle_Application\\Frontend\\UI\\src\\app\\guards\\user.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { UserServiceService } from '../services/user-service.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserGuard implements CanActivate {\n  constructor(private userService:UserServiceService,private router:Router){}\n  canActivate(\n    ): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    const user=this.userService.getUserIdFromToken();\n    if(user){\n      return true;\n    }\n    else{\n      this.router.navigateByUrl(\"\")\n    }\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}