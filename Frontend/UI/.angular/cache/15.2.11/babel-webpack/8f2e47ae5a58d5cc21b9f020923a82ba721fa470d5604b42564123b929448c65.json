{"ast":null,"code":"import { JwtHelperService } from '@auth0/angular-jwt';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserServiceService {\n  constructor(http) {\n    this.http = http;\n    this.BackendUrl = 'http://localhost:5006/api/Account';\n  }\n  loginService(userDetails) {\n    return this.http.post(`${this.BackendUrl}`, userDetails);\n  }\n  storeToken(token) {\n    localStorage.setItem('token', token);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  decodeToken() {\n    const jwt = new JwtHelperService();\n    const token = this.getToken() ?? '';\n    return jwt.decodeToken(token);\n  }\n  getEmailFromToken() {\n    const token = this.decodeToken();\n    if (token) {\n      const email = token.name;\n      return email;\n    }\n    return '';\n  }\n  getUserIdFromToken() {\n    const token = this.decodeToken();\n    if (token) {\n      const userId = token.UserId;\n      return userId;\n    }\n    return 0;\n  }\n  getAllUsers() {\n    return this.http.get(`${this.BackendUrl}/getAllUsers`);\n  }\n  getAmountFromToken() {\n    const token = this.decodeToken();\n    if (token) {\n      const amount = token.Amount;\n      return amount;\n    }\n    return NaN;\n  }\n  getUserById() {\n    const userId = this.getUserIdFromToken();\n    return this.http.get(`${this.BackendUrl}/getUserById/${userId}`);\n  }\n  getAllUsersForAdmin() {\n    return this.http.get(`${this.BackendUrl}/getAllUserForAdmin`);\n  }\n  getRoleFromToken() {\n    const token = this.decodeToken();\n    if (token) {\n      const role = token.role;\n      return role;\n    }\n    return '';\n  }\n  getUserIdForAdmin(userId) {}\n  static #_ = this.ɵfac = function UserServiceService_Factory(t) {\n    return new (t || UserServiceService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserServiceService,\n    factory: UserServiceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,gBAAgB,QAAQ,oBAAoB;;;AAMrD,OAAM,MAAOC,kBAAkB;EAE7BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IADxB,eAAU,GAAW,mCAAmC;EACjB;EACvCC,YAAY,CAACC,WAAgB;IAC3B,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAC,GAAG,IAAI,CAACC,UAAU,EAAE,EAAEF,WAAW,CAAC;EAC1D;EACAG,UAAU,CAACC,KAAa;IACtBC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,KAAK,CAAC;EACtC;EACAG,QAAQ;IACN,OAAOF,YAAY,CAACG,OAAO,CAAC,OAAO,CAAC;EACtC;EACAC,WAAW;IACT,MAAMC,GAAG,GAAG,IAAIf,gBAAgB,EAAE;IAClC,MAAMS,KAAK,GAAG,IAAI,CAACG,QAAQ,EAAE,IAAI,EAAE;IACnC,OAAOG,GAAG,CAACD,WAAW,CAACL,KAAK,CAAC;EAC/B;EACAO,iBAAiB;IACf,MAAMP,KAAK,GAAG,IAAI,CAACK,WAAW,EAAE;IAChC,IAAIL,KAAK,EAAE;MACT,MAAMQ,KAAK,GAAGR,KAAK,CAACS,IAAI;MACxB,OAAOD,KAAK;;IAEd,OAAO,EAAE;EACX;EACAE,kBAAkB;IAChB,MAAMV,KAAK,GAAG,IAAI,CAACK,WAAW,EAAE;IAChC,IAAIL,KAAK,EAAE;MACT,MAAMW,MAAM,GAAGX,KAAK,CAACY,MAAM;MAC3B,OAAOD,MAAM;;IAEf,OAAO,CAAC;EACV;EACAE,WAAW;IACT,OAAO,IAAI,CAACnB,IAAI,CAACoB,GAAG,CAAC,GAAG,IAAI,CAAChB,UAAU,cAAc,CAAC;EACxD;EACAiB,kBAAkB;IAChB,MAAMf,KAAK,GAAG,IAAI,CAACK,WAAW,EAAE;IAChC,IAAIL,KAAK,EAAE;MACT,MAAMgB,MAAM,GAAGhB,KAAK,CAACiB,MAAM;MAC3B,OAAOD,MAAM;;IAEf,OAAOE,GAAG;EACZ;EACAC,WAAW;IACT,MAAMR,MAAM,GAAG,IAAI,CAACD,kBAAkB,EAAE;IACxC,OAAO,IAAI,CAAChB,IAAI,CAACoB,GAAG,CAAC,GAAG,IAAI,CAAChB,UAAU,gBAAgBa,MAAM,EAAE,CAAC;EAClE;EACAS,mBAAmB;IACjB,OAAO,IAAI,CAAC1B,IAAI,CAACoB,GAAG,CAAC,GAAG,IAAI,CAAChB,UAAU,qBAAqB,CAAC;EAC/D;EACAuB,gBAAgB;IACd,MAAMrB,KAAK,GAAC,IAAI,CAACK,WAAW,EAAE;IAC9B,IAAGL,KAAK,EAAC;MACP,MAAMsB,IAAI,GAACtB,KAAK,CAACsB,IAAI;MACrB,OAAOA,IAAI;;IAEb,OAAO,EAAE;EACX;EACAC,iBAAiB,CAACZ,MAAU,GAE5B;EAAC;qBA7DUnB,kBAAkB;EAAA;EAAA;WAAlBA,kBAAkB;IAAAgC,SAAlBhC,kBAAkB;IAAAiC,YAFjB;EAAM","names":["JwtHelperService","UserServiceService","constructor","http","loginService","userDetails","post","BackendUrl","storeToken","token","localStorage","setItem","getToken","getItem","decodeToken","jwt","getEmailFromToken","email","name","getUserIdFromToken","userId","UserId","getAllUsers","get","getAmountFromToken","amount","Amount","NaN","getUserById","getAllUsersForAdmin","getRoleFromToken","role","getUserIdForAdmin","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ayushpal\\Expense_Settle_Application\\Frontend\\UI\\src\\app\\services\\user-service.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserServiceService {\n  BackendUrl: string = 'http://localhost:5006/api/Account';\n  constructor(private http: HttpClient) {}\n  loginService(userDetails: any): Observable<any> {\n    return this.http.post(`${this.BackendUrl}`, userDetails);\n  }\n  storeToken(token: string) {\n    localStorage.setItem('token', token);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  decodeToken() {\n    const jwt = new JwtHelperService();\n    const token = this.getToken() ?? '';\n    return jwt.decodeToken(token);\n  }\n  getEmailFromToken() {\n    const token = this.decodeToken();\n    if (token) {\n      const email = token.name;\n      return email;\n    }\n    return '';\n  }\n  getUserIdFromToken() {\n    const token = this.decodeToken();\n    if (token) {\n      const userId = token.UserId;\n      return userId;\n    }\n    return 0;\n  }\n  getAllUsers(): Observable<any> {\n    return this.http.get(`${this.BackendUrl}/getAllUsers`);\n  }\n  getAmountFromToken() {\n    const token = this.decodeToken();\n    if (token) {\n      const amount = token.Amount;\n      return amount;\n    }\n    return NaN;\n  }\n  getUserById(): Observable<any> {\n    const userId = this.getUserIdFromToken();\n    return this.http.get(`${this.BackendUrl}/getUserById/${userId}`);\n  }\n  getAllUsersForAdmin():Observable<any>{\n    return this.http.get(`${this.BackendUrl}/getAllUserForAdmin`);\n  }\n  getRoleFromToken(){\n    const token=this.decodeToken();\n    if(token){\n      const role=token.role;\n      return role;\n    }\n    return '';\n  }\n  getUserIdForAdmin(userId:any){\n    \n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}