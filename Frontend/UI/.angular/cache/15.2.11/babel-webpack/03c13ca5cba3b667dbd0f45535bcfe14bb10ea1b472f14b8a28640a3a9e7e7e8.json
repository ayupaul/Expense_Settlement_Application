{"ast":null,"code":"import { Observable } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class GroupService {\n  constructor() {\n    this.BackendUrl = 'http://localhost:5006/api/Group';\n  }\n  static #_ = this.ɵfac = function GroupService_Factory(t) {\n    return new (t || GroupService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: GroupService,\n    factory: GroupService.ɵfac,\n    providedIn: 'root'\n  });\n}\n{}\ncreateGroup(groupData, any);\nObservable < any > {\n  const: userId = this.userService.getUserIdFromToken(),\n  return: this.http.post(`${this.BackendUrl}/${userId}`, groupData)\n};\ngetMyGroups();\nObservable < any > {};","map":{"version":3,"mappings":"AAEA,SAASA,UAAU,QAAQ,MAAM;;AAMjC,OAAM,MAAOC,YAAY;EAHzBC;IAIE,eAAU,GAAW,iCAAiC;;EAKrD;qBANUD,YAAY;EAAA;EAAA;WAAZA,YAAY;IAAAE,SAAZF,YAAY;IAAAG,YAFX;EAAM;;AAQhB;AACFC,WAAW,CAACC,SAAS,EAAEC,GAAG,CAAC;AAAEP,UAAU,GAACO,GAAG,GAAE;EAC3CC,KAAK,EAACC,MAAM,GAAG,IAAI,CAACC,WAAW,CAACC,kBAAkB,EAAE;EACpDC,MAAM,EAAC,IAAI,CAACC,IAAI,CAACC,IAAI,CAAC,GAAG,IAAI,CAACC,UAAU,IAAIN,MAAM,EAAE,EAAEH,SAAS;CAChE;AACDU,WAAW,EAAE;AAAChB,UAAU,GAACO,GAAG,GAAC,EAE5B","names":["Observable","GroupService","constructor","factory","providedIn","createGroup","groupData","any","const","userId","userService","getUserIdFromToken","return","http","post","BackendUrl","getMyGroups"],"sourceRoot":"","sources":["C:\\Users\\ayushpal\\Expense_Settle_Application\\Frontend\\UI\\src\\app\\services\\group.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserServiceService } from './user-service.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GroupService {\n  BackendUrl: string = 'http://localhost:5006/api/Group';\n  userId:\n  constructor(\n    private http: HttpClient,\n    private userService: UserServiceService\n  ) {}\n  createGroup(groupData: any): Observable<any> {\n    const userId = this.userService.getUserIdFromToken();\n    return this.http.post(`${this.BackendUrl}/${userId}`, groupData);\n  }\n  getMyGroups():Observable<any>{\n    \n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}