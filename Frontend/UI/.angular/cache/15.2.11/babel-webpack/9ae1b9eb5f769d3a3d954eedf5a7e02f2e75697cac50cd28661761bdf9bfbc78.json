{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./user-service.service\";\nexport class ExpenseService {\n  constructor(http, userService) {\n    this.http = http;\n    this.userService = userService;\n    this.BackendUrl = 'http://localhost:5006/api/Expense';\n  }\n  addNewExpense(expenseDetails, groupId) {\n    return this.http.post(`${this.BackendUrl}/${groupId}`, expenseDetails);\n  }\n  getExpensesPaidByMe(groupId) {\n    const userId = this.userService.getUserIdFromToken();\n    return this.http.get(`${this.BackendUrl}/getMyExpensesPaidByMe/${groupId}/${userId}`);\n  }\n  getExpensesOwe(groupId) {\n    const userId = this.userService.getUserIdFromToken();\n    return this.http.get(`${this.BackendUrl}/getMyExpensesSplitForMe/${groupId}/${userId}`);\n  }\n  viewMyOweExpenseDetails(expenseId) {\n    const userId = this.userService.getUserIdFromToken();\n    return this.http.get(`${this.BackendUrl}/getMyOwedExpense/${expenseId}/${userId}`);\n  }\n  settleExpense(expenseId, amountOwe) {\n    const userId = this.userService.getUserIdFromToken();\n    return this.http.post(`${this.BackendUrl}/settleExpense/${expenseId}/${userId}`, amountOwe);\n  }\n  getExpenseById(expenseId) {\n    return this.http.get(`${this.BackendUrl}/getExpenseById/${expenseId}`);\n  }\n  checkExpenseSettled(expenseId) {\n    return this.http.get(`${this.BackendUrl}/checkExpenseSettled/${expenseId}`);\n  }\n  static #_ = this.ɵfac = function ExpenseService_Factory(t) {\n    return new (t || ExpenseService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.UserServiceService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ExpenseService,\n    factory: ExpenseService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;;AAQA,OAAM,MAAOA,cAAc;EAEzBC,YACUC,IAAgB,EAChBC,WAA+B;IAD/B,SAAI,GAAJD,IAAI;IACJ,gBAAW,GAAXC,WAAW;IAHrB,eAAU,GAAW,mCAAmC;EAIrD;EAEHC,aAAa,CAACC,cAAmB,EAAEC,OAAY;IAC7C,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACC,UAAU,IAAIF,OAAO,EAAE,EAAED,cAAc,CAAC;EACxE;EAEAI,mBAAmB,CAACH,OAAe;IACjC,MAAMI,MAAM,GAAG,IAAI,CAACP,WAAW,CAACQ,kBAAkB,EAAE;IACpD,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAClB,GAAG,IAAI,CAACJ,UAAU,0BAA0BF,OAAO,IAAII,MAAM,EAAE,CAChE;EACH;EACAG,cAAc,CAACP,OAAe;IAC5B,MAAMI,MAAM,GAAG,IAAI,CAACP,WAAW,CAACQ,kBAAkB,EAAE;IACpD,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAClB,GAAG,IAAI,CAACJ,UAAU,4BAA4BF,OAAO,IAAII,MAAM,EAAE,CAClE;EACH;EACAI,uBAAuB,CAACC,SAAiB;IACvC,MAAML,MAAM,GAAG,IAAI,CAACP,WAAW,CAACQ,kBAAkB,EAAE;IACpD,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAClB,GAAG,IAAI,CAACJ,UAAU,qBAAqBO,SAAS,IAAIL,MAAM,EAAE,CAC7D;EACH;EACAM,aAAa,CAACD,SAAiB,EAAEE,SAAiB;IAChD,MAAMP,MAAM,GAAG,IAAI,CAACP,WAAW,CAACQ,kBAAkB,EAAE;IACpD,OAAO,IAAI,CAACT,IAAI,CAACK,IAAI,CACnB,GAAG,IAAI,CAACC,UAAU,kBAAkBO,SAAS,IAAIL,MAAM,EAAE,EACzDO,SAAS,CACV;EACH;EACAC,cAAc,CAACH,SAAiB;IAC9B,OAAO,IAAI,CAACb,IAAI,CAACU,GAAG,CAAC,GAAG,IAAI,CAACJ,UAAU,mBAAmBO,SAAS,EAAE,CAAC;EACxE;EACAI,mBAAmB,CAACJ,SAAgB;IAClC,OAAO,IAAI,CAACb,IAAI,CAACU,GAAG,CAAC,GAAG,IAAI,CAACJ,UAAU,wBAAwBO,SAAS,EAAE,CAAC;EAC7E;EAAC;qBAzCUf,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAAoB,SAAdpB,cAAc;IAAAqB,YAFb;EAAM","names":["ExpenseService","constructor","http","userService","addNewExpense","expenseDetails","groupId","post","BackendUrl","getExpensesPaidByMe","userId","getUserIdFromToken","get","getExpensesOwe","viewMyOweExpenseDetails","expenseId","settleExpense","amountOwe","getExpenseById","checkExpenseSettled","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\ayushpal\\Expense_Settle_Application\\Frontend\\UI\\src\\app\\services\\expense.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { UserServiceService } from './user-service.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ExpenseService {\n  BackendUrl: string = 'http://localhost:5006/api/Expense';\n  constructor(\n    private http: HttpClient,\n    private userService: UserServiceService\n  ) {}\n\n  addNewExpense(expenseDetails: any, groupId: any): Observable<any> {\n    return this.http.post(`${this.BackendUrl}/${groupId}`, expenseDetails);\n  }\n\n  getExpensesPaidByMe(groupId: number): Observable<any> {\n    const userId = this.userService.getUserIdFromToken();\n    return this.http.get(\n      `${this.BackendUrl}/getMyExpensesPaidByMe/${groupId}/${userId}`\n    );\n  }\n  getExpensesOwe(groupId: number): Observable<any> {\n    const userId = this.userService.getUserIdFromToken();\n    return this.http.get(\n      `${this.BackendUrl}/getMyExpensesSplitForMe/${groupId}/${userId}`\n    );\n  }\n  viewMyOweExpenseDetails(expenseId: number): Observable<any> {\n    const userId = this.userService.getUserIdFromToken();\n    return this.http.get(\n      `${this.BackendUrl}/getMyOwedExpense/${expenseId}/${userId}`\n    );\n  }\n  settleExpense(expenseId: number, amountOwe: number): Observable<any> {\n    const userId = this.userService.getUserIdFromToken();\n    return this.http.post(\n      `${this.BackendUrl}/settleExpense/${expenseId}/${userId}`,\n      amountOwe\n    );\n  }\n  getExpenseById(expenseId: number): Observable<any> {\n    return this.http.get(`${this.BackendUrl}/getExpenseById/${expenseId}`);\n  }\n  checkExpenseSettled(expenseId:number):Observable<any>{\n    return this.http.get(`${this.BackendUrl}/checkExpenseSettled/${expenseId}`);\n  }\n  closeExpense(expenseId:number)\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}