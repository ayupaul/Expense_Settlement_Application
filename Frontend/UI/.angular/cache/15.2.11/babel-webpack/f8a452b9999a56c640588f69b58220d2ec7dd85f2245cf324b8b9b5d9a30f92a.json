{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/user-service.service\";\nexport class TokenInterceptor {\n  constructor(userService) {\n    this.userService = userService;\n  }\n  intercept(request, next) {\n    const token = this.userService.decodeToken();\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(request);\n  }\n  static #_ = this.ɵfac = function TokenInterceptor_Factory(t) {\n    return new (t || TokenInterceptor)(i0.ɵɵinject(i1.UserServiceService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenInterceptor,\n    factory: TokenInterceptor.ɵfac\n  });\n}","map":{"version":3,"mappings":";;AAWA,OAAM,MAAOA,gBAAgB;EAE3BC,YAAoBC,WAA8B;IAA9B,gBAAW,GAAXA,WAAW;EAAsB;EAErDC,SAAS,CAACC,OAA6B,EAAEC,IAAiB;IACxD,MAAMC,KAAK,GAAC,IAAI,CAACJ,WAAW,CAACK,WAAW,EAAE;IAC1C,IAAGD,KAAK,EAAC;MACPF,OAAO,GAACA,OAAO,CAACI,KAAK,CAAC;QACpBC,UAAU,EAAC;UAACC,aAAa,EAAC,UAAUJ,KAAK;QAAE;OAC5C,CAAC;;IAEJ,OAAOD,IAAI,CAACM,MAAM,CAACP,OAAO,CAAC;EAC7B;EAAC;qBAZUJ,gBAAgB;EAAA;EAAA;WAAhBA,gBAAgB;IAAAY,SAAhBZ,gBAAgB;EAAA","names":["TokenInterceptor","constructor","userService","intercept","request","next","token","decodeToken","clone","setHeaders","Authorization","handle","factory"],"sourceRoot":"","sources":["C:\\Users\\ayushpal\\Expense_Settle_Application\\Frontend\\UI\\src\\app\\interceptor\\token.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { UserServiceService } from '../services/user-service.service';\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n\n  constructor(private userService:UserServiceService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    const token=this.userService.decodeToken()\n    if(token){\n      request=request.clone({\n        setHeaders:{Authorization:`Bearer ${token}`}\n      })\n    }\n    return next.handle(request);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}